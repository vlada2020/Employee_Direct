{"version":3,"sources":["components/Employees.js","components/Search.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Employees","props","fixedDate","Moment","dob","format","className","alt","firstName","src","icon","lastName","email","phone","Search","placeholder","name","type","onChange","event","startSort","Directory","state","employees","empSort","search","sorted","componentDidMount","fetch","then","res","json","setState","results","sortEmp","filter","first","toLowerCase","includes","last","target","value","render","label","map","employee","key","id","picture","medium","date","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b760bbd2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Employees.css\";\nimport Moment from \"moment\";\n\nconst Employees = (props) => {\n\n  let fixedDate = Moment(props.dob).format(\"LL\");\n\n  return (\n\n    <tr className=\"tr\">\n      <td><img alt={props.firstName} src={props.icon} /></td>\n      <td>{props.firstName} {props.lastName}</td>\n      <td>{props.email}</td>\n      <td>{props.phone} </td>\n      <td>{fixedDate}</td>\n    </tr>\n\n  )\n\n}\n\nexport default Employees;","import React from \"react\";\nimport \"../styles/Search.css\";\n\nconst Search = (props) => {\n\n  return (\n    <div className=\"d-flex justify-content-center mx-auto\">\n      <form>\n        <input\n          placeholder=\"Search Name\"\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control-lg search-font mx-auto\"\n          onChange={(event) => props.startSort(event)}\n        />\n      </form>\n    </div>\n  );\n\n}\n\nexport default Search;","import React, { Component } from \"react\";\nimport Employees from \"./Employees.js\";\nimport Search from \"./Search.js\";\nimport \"../styles/Directory.css\";\n\nclass Directory extends Component {\n\n  state = {\n    employees: [],\n    empSort: [],\n    search: \"\",\n    sorted: false,\n  };\n\n  // check that the component rendered at least once, and pull in our data\n  // wait for the information to come back\n  componentDidMount = () => {\n    fetch(`https://randomuser.me/api/?results=25&nat=us&inc=name,email,phone,id,picture,dob`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({ employees: json.results })\n      })\n  };\n\n  // sort through employees based on search term\n  // check if there is a match and set that to empSort for rendering\n  sortEmp = () => {\n    let { employees, search } = this.state;\n    let empSort = employees.filter(sorted => {\n      return (\n        sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\n        sorted.name.last.toLowerCase().includes(search.toLowerCase()) ||\n        sorted.email.toLowerCase().includes(search.toLowerCase())\n      )\n    })\n    this.setState({ empSort })\n  }\n\n  // grab search term, activate sorted  \n  startSort = event => {\n    this.setState({ search: event.target.value }, () => {\n      this.sortEmp();\n      this.setState({ sorted: true });\n    });\n  };\n\n  render = () => {\n\n    return (\n\n      <div>\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4\">Employee Directory</h1>\n          <p>Search by name/email to find who you are looking for.</p>\n          <Search\n            name=\"search\"\n            startSort={this.startSort}\n            label=\"Search\"\n          />\n        </div>\n\n        <div className=\"container\">\n          <table className=\"table\">\n            <thead className=\"thead\">\n              <tr>\n                <th>Picture</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Phone</th>\n                <th>DOB</th>\n              </tr>\n            </thead>\n            <tbody>\n\n              {/* if it's not sorted, map accordingly */}\n              {!this.state.sorted ? this.state.employees.map(employee => (\n\n\n                < Employees\n                  key={employee.id.value}\n                  firstName={employee.name.first}\n                  lastName={employee.name.last}\n                  phone={employee.phone}\n                  email={employee.email}\n                  icon={employee.picture.medium}\n                  dob={employee.dob.date}\n\n                />\n\n              ))\n                // otherwise map the sorted employees\n                : this.state.empSort.map(employee => (\n\n                  <Employees\n                    key={employee.id.value}\n                    firstName={employee.name.first}\n                    lastName={employee.name.last}\n                    phone={employee.phone}\n                    email={employee.email}\n                    icon={employee.picture.medium}\n                    dob={employee.dob.date}\n                  />\n\n                ))}\n          </tbody>\n          </table>\n\n        </div>\n\n      </div >\n\n    )\n\n  }\n\n}\n\nexport default Directory;","import React from \"react\";\nimport Directory from \"./components/Directory\";\nimport './App.css';\n\nconst App = () => {\n\n  return (\n\n    <div className=\"App\">\n      <Directory />\n    </div>\n\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","// code from activity 19 and 20\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}